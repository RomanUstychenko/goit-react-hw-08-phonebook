{"version":3,"file":"static/js/12.6bd87c15.chunk.js","mappings":"0QAOe,SAASA,IAEtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAASC,EAAAA,EAAAA,MACPC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAEfG,GAAWC,EAAAA,EAAAA,MAGXC,EAAe,SAACC,GACpB,MAAwBA,EAAMC,cAAtBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MAEd,OAAQf,GACJ,IAAK,OACDC,EAAQc,GACR,MACJ,IAAK,QACDZ,EAASY,GACT,MACJ,IAAK,WACDV,EAAYU,GACZ,MACJ,QACId,EAAQ,IACRE,EAAS,IACTE,EAAY,IAEvB,EAOD,OA3BsBW,EAAAA,EAAAA,IAAYC,EAAAA,IA4BzB,SAAC,KAAD,CAAUC,GAAG,eAIlB,4BACG,0CACA,kBACAC,SAbc,SAACC,GAClBA,EAAEC,iBACFX,GAASY,EAAAA,EAAAA,GAAO,CAAEtB,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,IACzD,EASM,WAEA,4BACM,kBACDmB,QAASjB,EADR,qBAGD,kBACAkB,GAAIlB,EAAQmB,YAAY,aAAazB,KAAK,OAAO0B,KAAK,OAAOC,UAAQ,EAACC,SAAUhB,EAAcG,MAAOf,EACrG6B,QAAQ,+HAGZ,4BACK,kBACDN,QAASf,EADR,sBAGD,kBACAgB,GAAIhB,EAASiB,YAAY,cAAczB,KAAK,QAAQ0B,KAAK,QAAQC,UAAQ,EAACC,SAAUhB,EAAcG,MAAOb,EACzG2B,QAAQ,iDAGZ,4BACK,kBACDN,QAASd,EADR,wBAGD,kBACAe,GAAIf,EAAYgB,YAAY,iBAAiBzB,KAAK,WAAW0B,KAAK,WAAWC,UAAQ,EAACC,SAAUhB,EAAcG,MAAOX,QAGzH,kDAKP,C,uDCrFM,IAAMa,EAAU,SAAC,GAAD,SAAEa,KAAeb,OAAjB,C,wDCCvB,IAkBIV,EAAS,WAGX,IAH0B,IAAdwB,EAAc,uDAAP,GACfP,EAAK,GACLQ,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfP,GADEY,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOZ,CACR,C","sources":["Pages/Registration/Registration.jsx","redux/auth/auth-selector.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { signup } from 'redux/auth/auth-operation';\nimport { isLogin } from 'redux/auth/auth-selector';\nimport { Navigate } from \"react-router-dom\";\n\nexport default function Registration() {\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n  const isUserLogin = useSelector(isLogin);\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n        case 'name':\n            setName(value);\n            break;\n        case 'email':\n            setEmail(value);\n            break;\n        case 'password':\n            setPassword(value);\n            break;\n        default:\n            setName('');\n            setEmail('');\n            setPassword('');\n    };\n};\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(signup({ name: name, email: email, password: password }));    \n};\n\nif (isUserLogin) {\n  return <Navigate to=\"/contacts\" />\n;}\n\n  return (\n    <div>\n       <h1>Registration</h1> \n       <form\n       onSubmit={handleSubmit}>\n       <div>\n            {<label \n            htmlFor={nameId}\n            >Login </label>}\n            <input \n            id={nameId} placeholder=\"Enter name\" name=\"name\" type=\"text\" required onChange={handleChange} value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n             />\n        </div>\n        <div>\n            {<label \n            htmlFor={emailId}\n            >E-mail </label>}\n            <input \n            id={emailId} placeholder=\"Enter email\" name=\"email\" type=\"email\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n             />\n        </div>\n        <div>\n            {<label \n            htmlFor={passwordId}\n            >Password </label>}\n            <input \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </div>\n        <button>Registration</button>\n       </form>\n       \n       </div>\n  )\n}\n","export const isLogin = ({auth}) => auth.isLogin;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Registration","useState","name","setName","email","setEmail","password","setPassword","nameId","nanoid","emailId","passwordId","dispatch","useDispatch","handleChange","event","currentTarget","value","useSelector","isLogin","to","onSubmit","e","preventDefault","signup","htmlFor","id","placeholder","type","required","onChange","pattern","auth","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}