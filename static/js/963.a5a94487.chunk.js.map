{"version":3,"file":"static/js/963.a5a94487.chunk.js","mappings":"6OAMe,SAASA,IAEtB,IAAMC,GAAWC,EAAAA,EAAAA,MAOXC,GAASC,EAAAA,EAAAA,MACPC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MASrB,OACE,4BACG,0CACA,kBACAG,SAnBc,SAACC,GAClBP,GAASQ,EAAAA,EAAAA,GAAOD,GACjB,EAgBI,WAEA,4BACM,kBACDE,QAASP,EADR,qBAGD,kBACAQ,GAAIR,EAAQS,YAAY,aAAaC,KAAK,OAAOC,KAAK,OAAOC,SAAS,aAI1E,4BACK,kBACDL,QAASL,EADR,sBAGD,kBACAM,GAAIN,EAASO,YAAY,cAAcC,KAAK,QAAQC,KAAK,QAAQC,SAAS,aAI9E,4BACK,kBACDL,QAASJ,EADR,wBAGD,kBACAK,GAAIL,EAAYM,YAAY,iBAAiBC,KAAK,OAAOC,KAAK,WAAWC,SAAS,aAItF,kDAKP,C,wDC9DD,IAkBIX,EAAS,WAGX,IAH0B,IAAdY,EAAc,uDAAP,GACfL,EAAK,GACLM,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfL,GADEU,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOV,CACR,C","sources":["components/Pages/Registration/Registration.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react'\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { signup } from 'redux/auth/auth-operation';\n\n\nexport default function Registration() {\n\n  const dispatch = useDispatch();\n  // const isUserLogin = useSelector(isLogin);\n\n  const onRegister = (data) => {\n    dispatch(signup(data));\n  }\n\n  const nameId = nanoid();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n    // const {name, email, password} = state;\n\n  //   const initialState = {\n  //     name: \"\",\n  //     email: \"\",\n  //     password: \"\",\n  // }\n\n  return (\n    <div>\n       <h1>Registration</h1> \n       <form\n       onSubmit={onRegister}>\n       <div>\n            {<label \n            htmlFor={nameId}\n            >Login </label>}\n            <input \n            id={nameId} placeholder=\"Enter name\" name=\"name\" type=\"text\" required=\"true\"\n            // checked={checked}  onChange={handleChange}  className={fullClassName}  value={name}   pattern={pattern}\n             />\n        </div>\n        <div>\n            {<label \n            htmlFor={emailId}\n            >E-mail </label>}\n            <input \n            id={emailId} placeholder=\"Enter email\" name=\"email\" type=\"email\" required=\"true\"\n            // checked={checked}  onChange={handleChange}  className={fullClassName}  value={name}   pattern={pattern}\n             />\n        </div>\n        <div>\n            {<label \n            htmlFor={passwordId}\n            >Password </label>}\n            <input \n            id={passwordId} placeholder=\"Enter password\" name=\"name\" type=\"password\" required=\"true\"\n            // checked={checked}  onChange={handleChange}  className={fullClassName}  value={name}   pattern={pattern}\n             />\n        </div>\n        <button>Registration</button>\n       </form>\n       \n       </div>\n  )\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Registration","dispatch","useDispatch","nameId","nanoid","emailId","passwordId","onSubmit","data","signup","htmlFor","id","placeholder","name","type","required","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}