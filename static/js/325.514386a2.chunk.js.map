{"version":3,"file":"static/js/325.514386a2.chunk.js","mappings":"wMAUA,EARc,CACV,CAACA,IAAIC,EAAAA,EAAAA,MACLC,GAAI,YACJC,KAAM,a,UCJV,EAAiC,mCAAjC,EAA2E,yBAA3E,EAA6G,2BAA7G,EAA6J,uC,SCGvJC,EAAe,SAAC,GAClB,OADiC,EAAdC,SACJ,UAAMC,EAAN,YAAmBA,GAAnB,UAAsCA,EACxD,EAEc,SAASC,IACtB,OACE,eAAIC,UAAWF,EAAf,SACKG,EAAAA,KAAU,YAAqB,IAAnBT,EAAkB,EAAlBA,GAAIE,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KACjB,OACI,eAAIK,UAAWF,EAAf,UACI,SAAC,KAAD,CAASE,UAAWJ,EAAcF,GAAIA,EAAIQ,KAAG,EAA7C,SAA+CP,KADNH,EAG/C,KAIb,CClBD,IAaA,EAbc,CACV,CAACA,IAAIC,EAAAA,EAAAA,MACLC,GAAI,YACJC,KAAM,gBAEN,CAACH,IAAIC,EAAAA,EAAAA,MACLC,GAAI,SACJC,KAAM,UCRV,EAAiC,mCAAjC,EAA2E,yBAA3E,EAA6G,2BAA7G,EAA6J,uCCGvJC,EAAe,SAAC,GAClB,OADiC,EAAdC,SACJ,UAAMC,EAAN,YAAmBA,GAAnB,UAAsCA,EACxD,EAEc,SAASK,IACtB,OACE,eAAIH,UAAWF,EAAf,SACKG,EAAAA,KAAU,YAAqB,IAAnBT,EAAkB,EAAlBA,GAAIE,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KACjB,OACI,eAAIK,UAAWF,EAAf,UACI,SAAC,KAAD,CAASE,UAAWJ,EAAcF,GAAIA,EAAIQ,KAAG,EAA7C,SAA+CP,KADNH,EAG/C,KAIb,C,wBCjBc,SAASY,IAExB,IAAMC,GAAWC,EAAAA,EAAAA,MAKf,OACE,0BACA,mBAAQC,QANI,WACZF,GAASG,EAAAA,EAAAA,MACZ,EAIG,qBAEH,CCbD,MAA6B,2B,UCKd,SAASC,IACtB,IAAMC,GAAcC,EAAAA,EAAAA,KACpB,OACE,gBAAKX,UAAWF,EAAhB,UACI,2BACGY,IAAgB,SAACX,EAAD,IACfW,GAAc,SAACN,EAAD,KAAiB,SAACD,EAAD,QAK1C,C,+CCTD,IALgB,WAEZ,OADeS,EAAAA,EAAAA,IAAYC,EAAAA,EAE9B,C,uDCNM,IAAMA,EAAU,SAAC,GAAD,SAAEC,KAAeD,OAAjB,C,wDCCvB,IAkBIpB,EAAS,WAGX,IAH0B,IAAdsB,EAAc,uDAAP,GACfvB,EAAK,GACLwB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfvB,GADE4B,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAO5B,CACR,C","sources":["components/Navbar/NavbarMenu/items.js","webpack://goit-react-hw-08-phonebook/./src/components/Navbar/NavbarMenu/NavbarMenu.module.scss?4912","components/Navbar/NavbarMenu/NavbarMenu.jsx","components/Navbar/NavbarAuth/items.js","webpack://goit-react-hw-08-phonebook/./src/components/Navbar/NavbarAuth/NavbarAuth.module.scss?e7fb","components/Navbar/NavbarAuth/NavbarAuth.jsx","components/Navbar/NavbarUser/NavbarUser.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Navbar/Navbar.module.scss?b554","components/Navbar/Navbar.jsx","components/hooks/useAuth.js","redux/auth/auth-selector.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\n\nconst items = [\n    {id: nanoid(),\n    to: \"/contacts\",\n    text: \"Contacts\"\n},\n]\n\n\nexport default items;","// extracted by mini-css-extract-plugin\nexport default {\"navbarMenuList\":\"NavbarMenu_navbarMenuList__qUVo+\",\"link\":\"NavbarMenu_link__PZhOW\",\"active\":\"NavbarMenu_active__Uxr5r\",\"navbarMenuListItem\":\"NavbarMenu_navbarMenuListItem__1E8RD\"};","import items from \"./items\"\nimport { NavLink } from \"react-router-dom\"\nimport scss from \"./NavbarMenu.module.scss\"\n\nconst getClassName = ({isActive}) => {\n    return isActive ? `${scss.link} ${scss.active}` : `${scss.link}`;\n}\n\nexport default function NavbarMenu() {\n  return (\n    <ul className={scss.navbarMenuList}>\n        {items.map(({id, to, text}) => {\n            return (\n                <li className={scss.navbarMenuListItem} key={id}>\n                    <NavLink className={getClassName} to={to} end>{text}</NavLink>\n                </li>\n            )})\n        }\n    </ul>\n  )\n}","import { nanoid } from \"nanoid\";\n\nconst items = [\n    {id: nanoid(),\n    to: \"/register\",\n    text: \"Registration\"\n},\n    {id: nanoid(),\n    to: \"/login\",\n    text: \"Login\"\n},\n\n]\n\n\nexport default items;","// extracted by mini-css-extract-plugin\nexport default {\"navbarMenuList\":\"NavbarAuth_navbarMenuList__wPYvE\",\"link\":\"NavbarAuth_link__uB6Cb\",\"active\":\"NavbarAuth_active__uFY6G\",\"navbarMenuListItem\":\"NavbarAuth_navbarMenuListItem__hijH9\"};","import items from \"./items\"\nimport { NavLink } from \"react-router-dom\"\nimport scss from \"./NavbarAuth.module.scss\"\n\nconst getClassName = ({isActive}) => {\n    return isActive ? `${scss.link} ${scss.active}` : `${scss.link}`;\n}\n\nexport default function NavbarAuth() {\n  return (\n    <ul className={scss.navbarMenuList}>\n        {items.map(({id, to, text}) => {\n            return (\n                <li className={scss.navbarMenuListItem} key={id}>\n                    <NavLink className={getClassName} to={to} end>{text}</NavLink>\n                </li>\n            )})\n        }\n    </ul>\n  )\n}","import { useDispatch } from \"react-redux\"\nimport { logout } from \"redux/auth/auth-operation\"\n\nexport default function NavbarUser() {\n\nconst dispatch = useDispatch();\nconst onLogout =() => {\n    dispatch(logout())\n}\n\n  return (\n    <div>\n    <button onClick={onLogout}>Logout</button></div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"navbarList\":\"Navbar_navbarList__wJY-l\"};","import NavbarMenu from \"components/Navbar/NavbarMenu/NavbarMenu\"\nimport NavbarAuth from \"components/Navbar/NavbarAuth/NavbarAuth\"\nimport NavbarUser from \"./NavbarUser/NavbarUser\"\nimport scss from \"./Navbar.module.scss\"\nimport UseAuth from \"components/hooks/useAuth\"\n\nexport default function Navbar() {\n  const isUserLogin = UseAuth()\n  return (\n    <nav className={scss.navbarList}>\n        <div>\n          {isUserLogin &&  <NavbarMenu />}\n           {isUserLogin ? <NavbarUser /> : <NavbarAuth />}\n        </div>\n    \n    </nav>\n  )\n}","import {  useSelector  } from \"react-redux\";\nimport { isLogin } from 'redux/auth/auth-selector';\n\nconst UseAuth = () => {\n    const result = useSelector(isLogin)\n    return result\n};\n\nexport default UseAuth;\n\n\n// if (isUserLogin) {\n//     return <Navigate to=\"/contacts\" />\n//   }","export const isLogin = ({auth}) => auth.isLogin;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["id","nanoid","to","text","getClassName","isActive","scss","NavbarMenu","className","items","end","NavbarAuth","NavbarUser","dispatch","useDispatch","onClick","logout","Navbar","isUserLogin","UseAuth","useSelector","isLogin","auth","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}