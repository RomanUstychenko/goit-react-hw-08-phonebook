{"version":3,"file":"static/js/506.6c9827d0.chunk.js","mappings":"sRAuBA,EArBgB,SAAC,GAA8B,IAA7BA,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SAC5B,GAA0BC,EAAAA,EAAAA,WAAS,UAAIF,IAAvC,eAAOG,EAAP,KAAcC,EAAd,KAiBA,MAAO,CAACD,MAAAA,EAAOC,SAAAA,EAAUC,aAfJ,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,QACpBC,EAAoB,aAATF,EAAsBC,EAAUH,EACjDH,GAAS,SAAAQ,GAAS,yBACXA,GADW,cAEbJ,EAAOG,GAFM,GAIrB,EAQsCE,aANlB,SAACC,GAClBA,EAAEC,iBACFd,GAAS,UAAIE,IACbC,GAAS,UAAIJ,GAChB,EAGJ,E,SCjBSA,EAAe,CACjBgB,MAAO,GACPC,SAAU,IAGC,SAASC,EAAT,GAAgC,IAAZjB,EAAW,EAAXA,SAE/B,EAA4CkB,EAAQ,CAACnB,aAAAA,EAAcC,SAAAA,IAA5DE,EAAP,EAAOA,MAAOE,EAAd,EAAcA,aAAcQ,EAA5B,EAA4BA,aACrBG,EAAmBb,EAAnBa,MAAOC,EAAYd,EAAZc,SAERG,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAGrB,OACE,0BACA,kBAAMpB,SAAUY,EAAhB,WACD,4BACM,kBAAOU,QAASH,EAAhB,sBACD,kBACAI,GAAIJ,EAASK,YAAY,aAAajB,KAAK,QAAQC,KAAK,OAAOiB,UAAQ,EAACC,SAAUtB,EAAcE,MAAOS,EACvGY,QAAQ,iDAGZ,4BACK,kBAAOL,QAASD,EAAhB,wBACD,kBACAE,GAAIF,EAAYG,YAAY,iBAAiBjB,KAAK,WAAWC,KAAK,WAAWiB,UAAQ,EAACC,SAAUtB,EAAcE,MAAOU,QAGzH,0CAIH,CC9BU,SAASY,IAGpB,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OANoBC,EAAAA,EAAAA,IAAYC,EAAAA,IAOvB,SAAC,KAAD,CAAUC,GAAG,eAMtB,4BACE,wCACA,SAAChB,EAAD,CAAWjB,SAbG,SAACkC,GACfL,GAASM,EAAAA,EAAAA,IAAMD,GAChB,MAeJ,CDSGjB,EAAUmB,aAAe,CACrBpC,SAAU,WAAQ,E,uDEzCnB,IAAMgC,EAAU,SAAC,GAAD,SAAEK,KAAeL,OAAjB,C,wDCCvB,IAkBIZ,EAAS,WAGX,IAH0B,IAAdkB,EAAc,uDAAP,GACff,EAAK,GACLgB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEff,GADEoB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOpB,CACR,C","sources":["components/hooks/useForm.js","components/LoginForm/loginForm.js","Pages/Login/Login.jsx","redux/auth/auth-selector.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import {useState} from \"react\";\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;","import { nanoid } from \"nanoid\";\nimport useForm from 'components/hooks/useForm';\nimport PropTypes from \"prop-types\";\n\n    const initialState = {\n        email: \"\",\n        password: \"\",\n      };\n    \n    export default function LoginForm({onSubmit}) {\n\n        const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n        const {email, password} = state;\n\n        const emailId = nanoid();\n        const passwordId = nanoid();\n\n\n      return (\n        <div>\n        <form onSubmit={handleSubmit}>\n       <div>\n            {<label htmlFor={emailId}> Login </label>}\n            <input \n            id={emailId} placeholder=\"Enter name\" name=\"email\" type=\"text\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\" \n             />\n        </div>\n        <div>\n            {<label htmlFor={passwordId}>Password </label>}\n            <input \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n             />\n        </div>\n        <button>Login</button>\n       </form>\n       </div>\n      )\n    };\n\n    LoginForm.defaultProps = {\n        onSubmit: () => {}\n      }\n      \n      LoginForm.propTypes = {\n        onSubmit: PropTypes.func,\n      }\n    ","import { useDispatch, useSelector  } from \"react-redux\";\nimport { login } from 'redux/auth/auth-operation';\n\n\nimport { isLogin } from 'redux/auth/auth-selector';\nimport { Navigate } from \"react-router-dom\";\nimport LoginForm from 'components/LoginForm/loginForm';\n\nexport default function Login () {\n   \n\n    const dispatch = useDispatch();\n    const isUserLogin = useSelector(isLogin);\n  \n    const onLogin = (data) => {\n      dispatch(login(data));\n    }\n  \n    if (isUserLogin) {\n      return <Navigate to=\"/contacts\" />\n    }\n\n\n\n  return (\n    <div>\n      <h1>Login Page</h1>\n      <LoginForm onSubmit={onLogin}/>\n      \n    </div>\n  )\n};\n\n\n","export const isLogin = ({auth}) => auth.isLogin;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["initialState","onSubmit","useState","state","setState","handleChange","target","value","name","type","checked","newValue","prevState","handleSubmit","e","preventDefault","email","password","LoginForm","useForm","emailId","nanoid","passwordId","htmlFor","id","placeholder","required","onChange","pattern","Login","dispatch","useDispatch","useSelector","isLogin","to","data","login","defaultProps","auth","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}