{"version":3,"file":"static/js/166.2059944e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.scss?6b75","redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.scss?e1a7","redux/filter/filter-selector.js","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/filter/Filter.module.scss?f3f1","components/filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Pages/Contacts/Contacts.module.scss?1a3d","components/Pages/Contacts/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__zqkUM\",\"formInput\":\"ContactForm_formInput__4newl\",\"formInputName\":\"ContactForm_formInputName__MS9gi\",\"formInputTel\":\"ContactForm_formInputTel__QLeAr\",\"formBtn\":\"ContactForm_formBtn__EULMB\"};","export const getContacts = ({contacts}) => contacts.items;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\nexport const getFilteredContacts = ({filter, contacts}) => {   \n    if (!filter) \n    {return contacts.items};\n};","import { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport scss from \"./ContactForm.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selector';\nimport { addContacts } from \"redux/contacts/contacts-operation\"; \n\nexport default function ContactForm () {\n  const contacts = useSelector(getFilteredContacts);\n  \n  const dispatch = useDispatch();\n\n   const [state, setState] = useState({\n            name: '',\n            phone: '',\n   });\n\n  const nameID = nanoid();\n  const telID = nanoid();\n\n  const handleChange = (e) => {\n        const {name, value} = e.target;\n        setState((prev) => {\n          return {\n            ...prev,\n            [name]: value,\n          }\n        })\n      };\n\n  const handleSubmit = (e) => {\n        e.preventDefault()\n\n        const {name, phone} = state;\n        onAddContacts({name, phone})\n      };\n      const onAddContacts = (data) => {\n        if (duplicateContacts(data)) {\n          alert (`${data.name} is already in contact`)\n          return\n        }\n        else {\n          const action = addContacts(data);\n          dispatch(action);\n          setState ({\n            name: '',\n            phone: '',\n          })\n        }\n      };\n\n      const duplicateContacts = ({name}) => {\n        const result = contacts.find((contact) => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n        return result;\n    };\n\n      return ( \n        <form \n        className={scss.form}\n        onSubmit={handleSubmit}>\n        <div className={scss.formInput}>\n          <label htmlFor={nameID}>Name</label>\n          <input \n          className={scss.formInputName}\n          id={nameID} \n          type=\"text\" \n          name=\"name\" \n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={state.name} \n          onChange={handleChange} />\n        </div>\n        <div className={scss.formInput}>\n          <label htmlFor={telID}>Phone</label>\n          <input \n          className={scss.formInputTel}\n          id={telID} \n          type=\"number\" \n          name=\"phone\" \n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={state.phone} \n          onChange={handleChange} \n          required/>\n        </div>\n        <button \n        className={scss.formBtn}\n        type=\"submit\">Add</button>\n        </form>\n        )\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__lfyFV\",\"delContacts\":\"ContactList_delContacts__526Mc\"};","export const getFilter = store => store.filter;","import scss from \"./ContactList.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contacts-selector';\nimport  { getFilter }from 'redux/filter/filter-selector';\nimport { deleteContact } from \"redux/contacts/contacts-operation\"; \n\n export const ContactList = () => {\n    \n    const contacts = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const getFilteredContact = () => {\n        if (!filter) {\n          return contacts;\n        }\n            const normalizedFilter = filter.toLocaleLowerCase();\n            const filteredContact = contacts.filter(({name}) => {\n            const nornalizedName = name.toLocaleLowerCase();\n            const result = nornalizedName.includes(normalizedFilter);\n            return result;\n          })\n          return filteredContact;\n        };\n\n    return (\n            <ul>\n            {getFilteredContact().map(({name, phone, id}) => (\n            <li className={scss.contactList} key={id}> \n            <b>Name:</b>  {name} <br />\n            <b className={scss.tel}>Tel:</b> {phone} \n            <span className={scss.delContacts} onClick={() => { dispatch(deleteContact(id)); }}>Delete</span></li>\n    ))\n    }\n         </ul>)\n         }","// extracted by mini-css-extract-plugin\nexport default {\"contactFilterInput\":\"Filter_contactFilterInput__A7VY6\",\"contactFilterLabel\":\"Filter_contactFilterLabel__EgZcb\",\"contactFilter\":\"Filter_contactFilter__CK3n0\"};","import scss from \"./Filter.module.scss\"\nimport { useSelector, useDispatch } from 'react-redux';\nimport  { getFilter }from 'redux/filter/filter-selector';\nimport { nanoid } from \"nanoid\";\nimport { setFilter } from \"redux/filter/filter-slice\";\n\nconst Filter = () => {\n\n    const filters = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const findID = nanoid();\n\n    const  handleChange = (e) => {\n        const {value} = e.target;\n        dispatch(setFilter(value))\n      };\n\nreturn (\n    <div className={scss.contactFilter}>\n              <label\n              className={scss.contactFilterLabel}\n              htmlFor={findID}\n              >Find contacts by name\n              </label>\n              <input \n              className={scss.contactFilterInput}\n              type=\"text\" \n              name=\"filter\" \n              value={filters}\n              onChange={handleChange}\n              title=\"Search\"\n              required\n              />\n          </div>\n)};\n\n  export default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"phoneBook\":\"Contacts_phoneBook__mYkJh\",\"titlePhoneBook\":\"Contacts_titlePhoneBook__X06oA\",\"contactForm\":\"Contacts_contactForm__DnC0a\",\"contacts\":\"Contacts_contacts__y5j95\",\"contactsLoading\":\"Contacts_contactsLoading__guAmQ\"};","// import { useEffect } from \"react\";\nimport  ContactForm  from \"../../ContactForm/ContactForm\"\nimport {ContactList} from \"../../ContactList/ContactList\"\nimport { fetchContacts } from \"redux/contacts/contacts-operation\"\nimport Filter from \"../../filter/Filter\"\nimport scss from \"./Contacts.module.scss\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getState } from 'redux/contacts/contacts-selector';\nimport { getContacts } from 'redux/contacts/contacts-selector';\n\nexport default function Contacts() {\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n const {loading, error} = useSelector(getState);\n\n  useEffect(() => {\n      dispatch(fetchContacts());\n      }, [dispatch]);\n\n  return (\n    <div  className={scss.phoneBook}>\n      <div className={scss.contactForm}>\n      <h2 className={scss.titlePhoneBook}>PhoneBook</h2>\n        <ContactForm />\n      </div>\n      <div className={scss.contacts}>\n      <h2>Contacts</h2>\n        <Filter />\n          {!loading && contacts.length > 0 && <ContactList />}\n          {loading && <p className={scss.contactsLoading}>...loading</p>}\n          {error && <p>oops, something went wrong</p>}\n      </div>\n    </div>\n    )\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getContacts","contacts","items","getState","loading","error","getFilteredContacts","filter","ContactForm","useSelector","dispatch","useDispatch","useState","name","phone","state","setState","nameID","nanoid","telID","handleChange","e","target","value","prev","onAddContacts","data","duplicateContacts","alert","action","addContacts","find","contact","toLocaleLowerCase","className","scss","onSubmit","preventDefault","htmlFor","id","type","pattern","title","required","onChange","getFilter","store","ContactList","normalizedFilter","includes","getFilteredContact","map","onClick","deleteContact","filters","findID","setFilter","Contacts","useEffect","fetchContacts","length","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}