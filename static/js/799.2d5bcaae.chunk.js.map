{"version":3,"file":"static/js/799.2d5bcaae.chunk.js","mappings":"uPAKe,SAASA,IAEtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACE,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAEbE,EAAe,SAACC,GACpB,MAAwBA,EAAMC,cAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACJ,IAAK,QACDX,EAASY,GACT,MACJ,IAAK,WACDV,EAAYU,GACZ,MACJ,QACIZ,EAAS,IACTE,EAAY,IAEvB,EAQD,OACE,4BACJ,wCACA,kBACAW,SAVuB,SAACC,GAClBA,EAAEC,iBACFZ,GAASa,EAAAA,EAAAA,GAAM,CAAEjB,MAAOA,EAAOE,SAAUA,KACzCD,EAAS,IACTE,EAAY,GACjB,EAID,WAGO,4BACM,kBAAOe,QAASZ,EAAhB,sBACD,kBACAa,GAAIb,EAASc,YAAY,aAAaR,KAAK,QAAQS,KAAK,OAAOC,UAAQ,EAACC,SAAUd,EAAcI,MAAOb,EACvGwB,QAAQ,iDAIZ,4BACK,kBACDN,QAASV,EADR,wBAGD,kBACAW,GAAIX,EAAYY,YAAY,iBAAiBR,KAAK,WAAWS,KAAK,WAAWC,UAAQ,EAACC,SAAUd,EAAcI,MAAOX,QAIzH,2CAKP,C,wDC/DD,IAkBIK,EAAS,WAGX,IAH0B,IAAdkB,EAAc,uDAAP,GACfN,EAAK,GACLO,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfN,GADEW,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOX,CACR,C","sources":["components/Pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from 'redux/auth/auth-operation';\n\nexport default function Login() {\n\n  const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    \n    const dispatch = useDispatch();\n    const emailId = nanoid();\n    const passwordId = nanoid();\n\n    const handleChange = (event) => {\n      const { name, value } = event.currentTarget;\n\n      switch (name) {\n          case 'email':\n              setEmail(value);\n              break;\n          case 'password':\n              setPassword(value);\n              break;\n          default:\n              setEmail('');\n              setPassword('');\n      };\n  };\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n      dispatch(login({ email: email, password: password }));\n      setEmail('');\n      setPassword('');\n};\n  return (\n    <div>\n<h1>Login Page</h1>\n<form\nonSubmit={handleSubmit}\n>\n       <div>\n            {<label htmlFor={emailId}> Login </label>}\n            <input \n            id={emailId} placeholder=\"Enter name\" name=\"email\" type=\"text\" required onChange={handleChange} value={email}\n            pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n            // checked={checked}    className={fullClassName}  \n             />\n        </div>\n        <div>\n            {<label \n            htmlFor={passwordId}\n            >Password </label>}\n            <input \n            id={passwordId} placeholder=\"Enter password\" name=\"password\" type=\"password\" required onChange={handleChange} value={password}\n            // checked={checked}   className={fullClassName}  \n             />\n        </div>\n        <button>Login</button>\n       </form>\n      \n    </div>\n  )\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Login","useState","email","setEmail","password","setPassword","dispatch","useDispatch","emailId","nanoid","passwordId","handleChange","event","currentTarget","name","value","onSubmit","e","preventDefault","login","htmlFor","id","placeholder","type","required","onChange","pattern","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}